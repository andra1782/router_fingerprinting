"""
Run only once if needed to create the database. You need to have `cvelistV5-main` in the same folder as this script.
Note that you need to manually update the db schema and create the indexes after this script runs.
"""
import json
import sqlite3
from pathlib import Path

import pandas as pd

con = sqlite3.connect('cve.db')

def read_json_to_dataframe(file_path: str) -> pd.DataFrame:
    try:
        if not Path(file_path).exists():
            raise FileNotFoundError(f"JSON file not found: {file_path}")
        return pd.read_json(file_path)
    except Exception as e:
        print(f"Error reading JSON file: {e}")
        return pd.DataFrame()
    
    
def save_to_sqlite(json_list: list[dict]):
    df = pd.DataFrame.from_dict(json_list)
    df = df.set_index('cveId')
    print(df.to_sql(name='cve_metadata', con=con, if_exists='replace'))


def contains_router(description: str) -> bool:
    return 'router' in description.lower()


def read_metadata(filename: str) -> dict:
    with open(filename, 'r', encoding='utf-8') as f:
        data = json.load(f)
        id = data['cveMetadata']['cveId']

        try:  # Try to add `relatedToRouters` field; some old CVEs won't have this, so we wrap it in a try except block
            description = data['containers']['cna']['descriptions'][0]['value']
            related_to_routers = 0 if contains_router(description) else 2
        except KeyError:
            related_to_routers = 1
        # related_to_routers is 0 if the description contains a router, 2 if it does not, and 1 if a description could not be found (we're not sure about it)

        try:  # Same with severity metrics
            raw_metrics = data['containers']['cna']['metrics'][0]

            # Sometimes metrics dictionary exists, but it does not have any cvssV fields. In that case, we catch `IndexErrors`
            latest_cvss_version = [x for x in raw_metrics.keys() if x.startswith('cvssV')][0]

            # We only care about these 3 metrics; any other metrics can be extracted from the vector string
            dict_metrics = {key: raw_metrics[latest_cvss_version][key] for key in
                            ['baseScore', 'baseSeverity', 'vectorString']}
        except (KeyError, IndexError):
            dict_metrics = {'baseScore': None, 'baseSeverity': None, 'vectorString': None}

        return data['cveMetadata'] | {'relatedToRouters': related_to_routers} | dict_metrics


if __name__ == '__main__':
    metadata_list = []

    with open('hitlist.txt', 'r') as hitlist:  # paths of all CVE json files
        for line in hitlist:
            metadata_list.append(read_metadata(line.strip()))
    
    save_to_sqlite(metadata_list)
