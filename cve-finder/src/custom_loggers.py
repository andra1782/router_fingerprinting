"""
Custom logging configuration. 
"""
import datetime
import logging
import pathlib
import re
from logging import LogRecord

# Path to log file
log_file = f"{pathlib.Path(__file__).parent.resolve()}/.log"

# List of ANSI color escape codes
RED = "\x1b[31;20m"
BOLD_RED = "\x1b[31;1m"
GREEN = "\x1b[32;20m"
YELLOW = "\x1b[33;20m"
BLUE = "\x1b[34;20m"
MAGENTA = "\x1b[35;20m"
CYAN = "\x1b[36;20m"
GREY = "\x1b[39;20m"
RESET = "\x1b[0m"

# ==========================Create loggers=============================
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# ==========================Create handlers============================
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)

file_handler = logging.FileHandler(log_file)
file_handler.setLevel(logging.WARNING)

# ==========================Create formatters==========================
default_formatter = logging.Formatter("%(asctime)s   %(funcName)s   %(levelname)s   %(message)s")


class LevelColorFormatter(logging.Formatter):
    LEVEL_MAPPING = {
        logging.DEBUG: CYAN,
        logging.INFO: GREEN,
        logging.WARNING: YELLOW,
        logging.ERROR: RED,
        logging.CRITICAL: BOLD_RED,
    }

    important_patterns = {
        'digits': '(?:\\b|\\B-)\d+(?:.\d+)?(?:e-?\d+)?\\b',
        # 'snake_case': '\\b[a-zA-Z]+(?:_[a-zA-Z]+)+\\b',
        'path': '\\B(?:./|(?:\.\./|[a-zA-Z0-9-_]+/)+)\w+(?:\.\w+)?\\b',
        'all_caps': '\\b[A-Z_]+\\b',
        'quoted': '\\B(?:".*?"|\\\'.*?\\\')\\B',
        'keywords': 'True|False|None'
    }

    pattern = re.compile('|'.join(important_patterns.values()))

    def format(self, record: LogRecord) -> str:
        message = self.pattern.sub(f'{YELLOW}\g<0>{RESET}', record.getMessage())
        time = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
        level_color = self.LEVEL_MAPPING[record.levelno]

        return f'{time}   {record.funcName:<15}   {level_color}{record.levelname:<8}{RESET}   {message}'


# ==========================Create filters============================
def ignore_level_15(record: LogRecord):
    return record.levelno != 15


# =========Add formatters to handlers and handlers to loggers=========
console_handler.setFormatter(LevelColorFormatter())
console_handler.addFilter(ignore_level_15)
file_handler.setFormatter(default_formatter)

logger.addHandler(console_handler)
logger.addHandler(file_handler)
