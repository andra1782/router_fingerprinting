import sqlite3

from cvss import CVSS2, CVSS3, CVSS4


CON = sqlite3.connect('../cve3.db')
CUR = CON.cursor()
FIELD = 'attackComplexity'


def parse_cvss_vector(vector_string: str) -> dict[str, str]:
    """
    CVSS vector strings encode a lot of information about the severity of a vulnerability. This method takes a 
    cvss vector string and parses it into a dictionary. This is only used when the `--verbose-severity` flag is
    set, since it produces a lot of output. 
    
    You can check https://www.first.org/cvss/specification-document for 
    information on how the 4.0 version is structured.
    :param vector_string: The cvss vector string of the CVE
    :return: A dictionary where the keys are the names of the metrics and the values are the values of the metrics.
    """
    cvss_version = vector_string[5:8]

    return {
        '2.0': CVSS2,
        '3.0': CVSS3,
        '3.1': CVSS3,
        '4.0': CVSS4,
    }[cvss_version](vector_string).as_json()


def field_filter(cveId, vectorString):
    parsed_vector = parse_cvss_vector(vectorString)
    return cveId, parsed_vector[FIELD]



if __name__ == '__main__':
    entries = [field_filter(*i) for i in CUR.execute('select cveId, vectorString from cve_metadata where vectorString not null')]
    
    for cveId, value in entries:
        query = f"UPDATE cve_metadata SET {FIELD} = '{value}' WHERE cveId = '{cveId}'"
        CUR.execute(query)
    CON.commit()
