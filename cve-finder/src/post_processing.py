import sqlite3

import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt, rcParams
from matplotlib.axes import Axes

"""
============================== GLOBALS ==============================
"""

sns.set_theme(style="whitegrid")

rcParams['figure.figsize'] = 13.31, 6.65
rcParams['lines.linewidth'] = 0.1

CON = sqlite3.connect('../cve3.db')
CUR = CON.cursor()

"""
============================== UTIL FUNCTIONS ============================== 
"""


def apply_style(*, xlabel, ylabel, log=True):
    def plot_fun(fun):
        def take_args(*args, **kwargs):
            ax: Axes = fun(*args, **kwargs)

            ax.set(xlabel=xlabel, ylabel=ylabel)
            ax.set_title(fun.__name__.replace('_', ' ').title().replace('Cve', 'CVE').replace('Cvss', 'CVSS') + ' (Base Score 8.0+, Exploitability HIGH)')
            if log:
                ax.set(yscale='log')

            try:
                sns.move_legend(ax, loc='upper center', ncol=4)
            except Exception:
                pass
            
            # plt.margins(0.015, tight=True)
            plt.tight_layout()
            plt.show()

        return take_args

    return plot_fun


"""
============================== PLOT FUNCTIONS ==============================
"""


@apply_style(xlabel='Vendors', ylabel='Average CVE scores', log=False)
def cvss_base_score_distribution(df: pd.DataFrame) -> Axes:
    df = df[['shortVendorName', 'baseScore']]
    return sns.boxplot(data=df, x='shortVendorName', y='baseScore', hue='shortVendorName', palette='Paired', linewidth=.5)


@apply_style(xlabel='Vendors', ylabel='Number of Engine IDs')
def routers_per_vendor(df: pd.DataFrame) -> Axes:
    df = df[['shortVendorName', 'engineId']].drop_duplicates().groupby(['shortVendorName']).count()
    return sns.barplot(data=df, x='shortVendorName', y='engineId', hue='shortVendorName', palette='Paired', )


@apply_style(xlabel='Vendor', ylabel='Number of unique CVEs')
def unique_cves_per_vendor(df: pd.DataFrame) -> Axes:
    # boxplot of the unique CVEs that affect vendors
    df = df[['shortVendorName', 'cveId']].drop_duplicates().groupby(['shortVendorName']).count()

    return sns.barplot(data=df, x='shortVendorName', y='cveId', hue='shortVendorName', palette='Paired', )


@apply_style(xlabel='Vendor', ylabel='Number of CVEs')
def number_of_cves_per_vendor(df: pd.DataFrame) -> Axes:

    print(df)

    return sns.barplot(data=df, x='shortVendorName', y='count', hue='shortVendorName', palette='Paired', )


@apply_style(xlabel='Vendor', ylabel='Number of routers')
def routers_with_easily_exploitable_high_severity_cves_in_critical_infrastructure(df: pd.DataFrame):
    df = df.loc[df['tag'].str.contains('icrit')][['shortVendorName', 'engineIDData']].groupby('shortVendorName').count()
    print(df)

    return sns.barplot(data=df, x='shortVendorName', y='engineIDData', hue='shortVendorName', palette='Paired', )


@apply_style(xlabel='IPs per router', ylabel='Number of routers', log=False)
def number_of_IPs_per_fingerprint():
    df = pd.read_sql_query('SELECT snmpEngineBoots, snmpRebootDate, enterprise, count(ip) FROM scan_results WHERE snmpEngineBoots != 0 GROUP BY snmpEngineBoots, snmpRebootDate, enterprise', CON)
    
    print(df)

    return sns.histplot(data=df, x='count(ip)', hue='enterprise', palette='Paired', multiple='stack', binwidth=1., binrange=(1, 10), linewidth=.5)


@apply_style(xlabel='Network name', ylabel='Number of vulnerable routers in network', log=False)
def most_vulnerable_networks(df: pd.DataFrame):
    df = df[['snmpEngineBoots', 'snmpRebootDate', 'orgName']].drop_duplicates().groupby('orgName').count().sort_values('snmpEngineBoots', ascending=False)[:10]
    print(df)
    ax = sns.barplot(data=df, x='orgName', y='snmpEngineBoots', hue='orgName', palette='Paired', )
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, horizontalalignment='right')
    return ax


def load_dataframe() -> pd.DataFrame:
    return pd.read_csv('../found_cves_with_tags.csv')
    

def create_figures(df: pd.DataFrame):
    try:
        # cvss_base_score_distribution(df)
        # most_vulnerable_networks(df)
        # number_of_IPs_per_fingerprint()
        # most_vulnerable_networks(df)
        routers_with_easily_exploitable_high_severity_cves_in_critical_infrastructure(df)
        most_vulnerable_networks(df)
    except Exception as e:
        print(e)


if __name__ == '__main__':
    main_df = load_dataframe()
    create_figures(main_df)
