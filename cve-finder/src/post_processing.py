import sqlite3

import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt, rcParams
from matplotlib.axes import Axes
from matplotlib.pyplot import title
from numpy.f2py.crackfortran import groupname

from queries import FILTERED_SCAN_RESULTS

"""
============================== GLOBALS ==============================
"""

sns.set_theme(style="ticks")

rcParams['figure.figsize'] = 11.76,4.85 # powerpoint graph size

CON = sqlite3.connect('../cve3.db')
CUR = CON.cursor()

"""
============================== UTIL FUNCTIONS ============================== 
"""

def build_and_execute_query(*, select=None, conditions=None, groupby=None) -> pd.DataFrame:
    select_statement = '' if select is None else ",".join(select)
    condition_statement = '' if conditions is None else f'AND {" AND ".join(conditions)}'
    groupby_statement = '' if groupby is None else f'GROUP BY {",".join(groupby)}'
    
    return pd.read_sql_query(FILTERED_SCAN_RESULTS + f'''
        SELECT {select_statement} 
        FROM processed_results d
        JOIN (SELECT * FROM cve_metadata NATURAL JOIN cve_vendor NATURAL JOIN vendors) m
        ON m.datePublished > d.snmpRebootDate AND m.shortVendorName == d.enterprise AND m.relatedToRouters < 2
        {condition_statement}
        {groupby_statement}
    ''', con=CON)


def apply_style(*, xlabel, ylabel, title):
    def plot_fun(fun):
        def take_args(*args, **kwargs):
            ax = fun(*args, **kwargs)

            ax.set(xlabel=xlabel, ylabel=ylabel)
            ax.set(yscale='log')
            ax.set_title(title)

            try:
                sns.move_legend(ax,  loc='upper center', ncol=4)
            except Exception:
                pass
            
            plt.show()
            
        return take_args
    return plot_fun

"""
============================== PLOT FUNCTIONS ==============================
"""

@apply_style(xlabel='CVSS Base Score', ylabel='Number of CVEs', title='CVSS Base Score Distribution')
def basic_plot(df: pd.DataFrame) -> Axes:
    df = df[['shortVendorName', 'baseScore']]
    return sns.histplot(data=df, x='baseScore', hue='shortVendorName', multiple='dodge',
                        binwidth=.5, palette='Paired', linewidth=.5)


@apply_style(xlabel='Ease of exploitability', ylabel='Percentage of CVEs', title='CVE Exploitability Score Distribution')
def string_plot(df: pd.DataFrame) -> Axes:
    df = df[['shortVendorName', 'exploitabilityScore']].sort_values('exploitabilityScore')
    return sns.histplot(data=df, x='exploitabilityScore', hue='shortVendorName', multiple='fill',
                        palette='Paired', linewidth=.5)


@apply_style(xlabel='Vendors', ylabel='Number of Engine IDs', title='EngineIDs per Vendor')
def ips_per_vendor(df: pd.DataFrame) -> Axes:
    df = df[['shortVendorName', 'engineId']].drop_duplicates().groupby(['shortVendorName']).count()
    return sns.barplot(data=df, x='shortVendorName', y='engineId', hue='shortVendorName', palette='Paired', linewidth=.5,)


@apply_style(xlabel='Vendor', ylabel='CVSS Base Score', title='CVSS Base Score Distribution per Vendor')
def cves_per_vendor():
    df = build_and_execute_query(
        select=['shortVendorName', 'baseScore'],
        conditions=['m.baseScore is not null']
    )
    
    return sns.boxplot(data=df, x='shortVendorName', y='baseScore', hue='shortVendorName', palette='Paired', linewidth=.5,)


@apply_style(xlabel='Vendor', ylabel='Number of CVEs', title='Number of CVEs per Vendor')
def cve_count_per_vendor():
    df = build_and_execute_query(
        select=['shortVendorName', 'count(cveId) as count'],
        groupby=['shortVendorName']
    )
    
    print(df)
    
    return sns.barplot(data=df, x='shortVendorName', y='count', hue='shortVendorName', palette='Paired', linewidth=.5,)


@apply_style(xlabel='Vendor', ylabel='Number of CVEs', title='Number of routers with easily-exploitable high-severity CVEs in critical infrastructure')   
def critical_graph(df: pd.DataFrame):
    df = df.loc[df['tag'].str.contains('icrit')][['shortVendorName', 'engineIDData']].groupby('shortVendorName').count()
    print(df)
    
    return sns.barplot(data=df, x='shortVendorName', y='engineIDData', hue='shortVendorName', palette='Paired', linewidth=.5,)


def spain_portugal_metrics(df):
    outage_start_date = '2025-04-27T00:00:00'
    outage_end_date = '2025-04-29T00:00:00'
    
    df = df.loc[df['country'].isin(['Spain', 'Portugal'])]
    did_not_reboot = sum(df['snmpRebootDate'] < outage_start_date)
    print(did_not_reboot)
    
    # print(f'{df.groupby(["shortVendorName"]).count()}')

if __name__ == '__main__':
    df = pd.read_csv('../found_cves_with_tags.csv')
    # test()
    # cves_per_vendor()
    # cve_count_per_vendor()
    # critical_graph(df)
    spain_portugal_metrics(df)